/*
 * Statepath-Implemenation of the Viterbi algorithm to determine the optimal state path for each observation set and report its probability
 * BU CS440 2015 Spring
 * Name:Ding Jin, Fuqing Wang, Xi Zhang
 */

import java.util.Scanner;
import java.io.*;
import java.util.ArrayList;

public class statepath {
    
    //helper method to find the index
    public static double getIndex(String obs, int state, String[] OBsym, ArrayList<ArrayList<Double>> bmat) {
        for (int i = 0; i < OBsym.length; i++) {
            if (obs.equals(OBsym[i])) {   
                return bmat.get(state).get(i);
            }
        }
        return 0.0;
    }
    
    //staright forward sorting process
    public static double[] arraysort(double[] arr) {
        int index = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i-1] > arr[i]) {
                arr[i] = arr[i-1];
            } else {
                index = i;
            }
        }
        double[] maxes = new double[2];
        maxes[0] = arr[arr.length-1];
        maxes[1] = index;
        return maxes;
    }
    
    //backtrack sorting process
    public static double[] backtracksort(double[] arr) {
        int index = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i-1] > arr[i]) {
                arr[i] = arr[i-1];
            } else {
                index = i;
            }
        }
        double[] maxes = new double[2];
        maxes[0] = arr[arr.length-1];
        if (maxes[0] != 0.0) {
            maxes[1] = index;
        } else {
            maxes[1] = arr.length;
        }
        return maxes;
    }
    
    //main
    public static void main(String args[]) throws IOException {
        File hmm = new File(args[0]);
        File obs = new File(args[1]);
        
        //read the hmm file
        Scanner scan = new Scanner(hmm);
        int N = scan.nextInt();
        //int M = scan.nextInt();
        //int T = scan.nextInt();
        scan.nextLine();
        
        String[] state = scan.nextLine().split("\\s+");
        String[] OBsym = scan.nextLine().split("\\s+");
        scan.nextLine();
        
        //buidling matrix a
        int rows = 0;
        ArrayList<ArrayList<Double>> amat = new ArrayList<ArrayList<Double>>();
        while(scan.hasNextDouble()) {
            amat.add(new ArrayList<Double>());
            String line = scan.nextLine();
            int count = line.split("\\s+").length;
            Scanner newScan = new Scanner(line);
            for (int i = 0; i < count; i++) {
                amat.get(rows).add(newScan.nextDouble());
            }
            rows++;
        }
        scan.nextLine();
        
        //building matrix b
        rows = 0;
        ArrayList<ArrayList<Double>> bmat = new ArrayList<ArrayList<Double>>();
        while(scan.hasNextDouble()) {
            bmat.add(new ArrayList<Double>());
            String line = scan.nextLine();
            int count = line.split("\\s+").length;
            Scanner newScan = new Scanner(line);
            for (int i = 0; i < count; i++) {
                bmat.get(rows).add(newScan.nextDouble());
            }
            rows++;
        }
        scan.nextLine();
        
        //building array pi
        double[] pi = new double[N];
        for (int i = 0; i < N; i++) {
            pi[i] = scan.nextFloat();
        }
        
        //read the obs file
        scan = new Scanner(obs);
        int numsets = scan.nextInt();
        scan.nextLine();
        int[] numobs = new int[numsets];
        ArrayList<String[]> observ = new ArrayList<String[]>();
        for (int i = 0; i < numsets; i++) {
            numobs[i] = scan.nextInt();
            scan.nextLine();
            observ.add(scan.nextLine().split("\\s+"));
        }
        
        //the Viterbi process
        for (int h = 0; h < numsets; h++) {
            double[][] deltas = new double[N][numobs[h]];
            double[][] psis = new double[N][numobs[h]];
            for (int init = 0; init < N; init++) {
                deltas[init][0] = pi[init]*getIndex(observ.get(h)[0], init, OBsym, bmat);
            }
            for (int init = 0; init < N; init++) {
                psis[init][0] = 0;
            }
            
            for (int t = 0; t < numobs[h]-1; t++) {
                double[] maxarray = new double[N];
                for (int j = 0; j < N; j++) {
                    for (int i = 0; i < N; i++) {
                        maxarray[i] = deltas[i][t]*amat.get(i).get(j)*getIndex(observ.get(h)[t+1], j, OBsym, bmat);
                    }
                    double[] maxargmax = new double[2];
                    maxargmax = arraysort(maxarray);
                    deltas[j][t+1] = maxargmax[0];
                    psis[j][t+1] = maxargmax[1];
                }
            }
            double[] maxarray = new double[N];
            for (int i = 0; i < N; i++) {
                maxarray[i] = deltas[i][deltas[0].length-1];
            }
            double[] maxandarg = backtracksort(maxarray);
            System.out.print(maxandarg[0] + " ");
            try {
                int[] states = new int[numobs[h]];
                states[numobs[h]-1] = (int)maxandarg[1];
                for (int i = numobs[h]-2; i >= 0; i--) {
                    states[i] = (int)psis[states[i+1]][i+1];
                }
                for (int i = 0; i < states.length; i++) {
                    System.out.print(state[states[i]] + " ");
                }
                System.out.println();
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println();
            }
        }
    }
}
